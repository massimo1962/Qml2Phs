package it.ingv;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.*;
import org.xml.sax.SAXException;
import java.io.*;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.text.BadLocationException;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author massimofares :: massimo.fares@ingv.it
 */
public class MainFrame extends javax.swing.JFrame {
    
    private List<PhsRecord> phs;
    private String QmlString = null;
//    private boolean done;
    private Options options;
    
    private static final String version = "versione 0.3";
    
    

    /*
    *
    * Construct new MainFrame: run program via GUI
    *
    */
    public MainFrame() {
        

        
        this.phs = null;
        initComponents();
        //Loading.setVisible(false);
        SaveFileButton.setEnabled(false);
        //Loading.setVisible(false);
        options = new Options(this, true);
        String[] currentUri = options.getURI_WEBSERVICE_DEFAULT().split("\\\n");
        /*
         * * @TODO: get version values from options
         */
        String[] listOfVersion = { "Preferred","0", "1", "2", "100", "1000"};
        jLabelVersion.setText(":: Client Events WS :: qml_to_phs "+version+" ::");
        jLabelCurrentConfig.setText(currentUri[0]);
        //** load version values into combo box
        jComboBoxEventVersion.setModel(new DefaultComboBoxModel(listOfVersion));
        options.setEventVersion("Preferred");
        
        // printer
        PrintStream printStream = new PrintStream(new CustomOutputStream(this.jTextAreaTEST));
        System.setOut(printStream);
        System.setErr(printStream);
        
        System.out.println("Parser Ready:  " + (new Date()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        LoadFileName = new javax.swing.JFileChooser();
        SaveFileName = new javax.swing.JFileChooser();
        TypeFileRequested = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        WsRequestButton = new javax.swing.JButton();
        TypeQML = new javax.swing.JRadioButton();
        TypePhs = new javax.swing.JRadioButton();
        jLabelVersion = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        LodaFileButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        SaveFileButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        LabelWsRequest = new javax.swing.JLabel();
        LabelTimeStart = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        AllMagnitudes = new javax.swing.JCheckBox();
        jLabel19 = new javax.swing.JLabel();
        AllOrigins = new javax.swing.JCheckBox();
        AllStationsMagnitudes = new javax.swing.JCheckBox();
        AllArrivals = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        EventId = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jDateChooserStart = new com.toedter.calendar.JDateChooser();
        jDateChooserEnd = new com.toedter.calendar.JDateChooser();
        jSpinnerDateStartHH = new javax.swing.JSpinner();
        jSpinnerDateStartMM = new javax.swing.JSpinner();
        jSpinnerDateEndHH = new javax.swing.JSpinner();
        jSpinnerDateEndMM = new javax.swing.JSpinner();
        MinMag = new javax.swing.JSpinner();
        MaxMag = new javax.swing.JSpinner();
        DepthFrom = new javax.swing.JSpinner();
        DepthTo = new javax.swing.JSpinner();
        Lat = new javax.swing.JSpinner();
        Lon = new javax.swing.JSpinner();
        MinRadius = new javax.swing.JSpinner();
        MaxRadius = new javax.swing.JSpinner();
        MinLat = new javax.swing.JSpinner();
        MinLon = new javax.swing.JSpinner();
        MaxLat = new javax.swing.JSpinner();
        MaxLon = new javax.swing.JSpinner();
        jLabel14 = new javax.swing.JLabel();
        jLabelCurrentConfig = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaTEST = new javax.swing.JTextArea();
        jLabelStatus = new javax.swing.JLabel();
        jComboBoxEventVersion = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemClose = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemPreferences = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Date Start");

        jLabel2.setText("Date Stop");

        jLabel3.setText("Min Mag");

        jLabel4.setText("Depth From");

        jLabel5.setText("Depth To");

        jLabel6.setText("Max Mag");

        jLabel7.setText("MinLat");

        jLabel8.setText("MaxLat");

        jLabel9.setText("MaxLon");

        jLabel10.setText("MinLon");

        WsRequestButton.setText("WS Request");
        WsRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WsRequestButtonActionPerformed(evt);
            }
        });

        TypeFileRequested.add(TypeQML);
        TypeQML.setText("QuakeML");
        TypeQML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypeQMLActionPerformed(evt);
            }
        });

        TypeFileRequested.add(TypePhs);
        TypePhs.setSelected(true);
        TypePhs.setText("Phs");
        TypePhs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TypePhsActionPerformed(evt);
            }
        });

        jLabelVersion.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabelVersion.setText(".");

        jLabel12.setText("Output Format");

        LodaFileButton.setText("Load File");
        LodaFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LodaFileButtonActionPerformed(evt);
            }
        });

        SaveFileButton.setText("Save File");
        SaveFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveFileButtonActionPerformed(evt);
            }
        });

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel13.setText("Load a local file here");

        LabelWsRequest.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        LabelWsRequest.setText("Load remote file here");

        LabelTimeStart.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        LabelTimeStart.setText("hour");

        jLabel15.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel15.setText("hour");

        jLabel17.setText("MinRadius");

        jLabel18.setText("MaxRadius");

        AllMagnitudes.setText("All Magnitudes");

        jLabel19.setText("Include:");

        AllOrigins.setSelected(true);
        AllOrigins.setText("All Origins");
        AllOrigins.setEnabled(false);

        AllStationsMagnitudes.setText("All Stations Magnitudes");
        AllStationsMagnitudes.setEnabled(false);

        AllArrivals.setSelected(true);
        AllArrivals.setText("All Arrivals");

        jLabel20.setText("Lat");

        jLabel21.setText("Lon");

        EventId.setDoubleBuffered(true);
        EventId.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EventIdMouseClicked(evt);
            }
        });
        EventId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EventIdActionPerformed(evt);
            }
        });
        EventId.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                EventIdPropertyChange(evt);
            }
        });

        jLabel22.setText("EventId");

        jLabel23.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel23.setText("min");

        jLabel24.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel24.setText("min");

        jSpinnerDateStartHH.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        jSpinnerDateStartMM.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        jSpinnerDateEndHH.setModel(new javax.swing.SpinnerNumberModel(0, 0, 23, 1));

        jSpinnerDateEndMM.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        MinMag.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));

        MaxMag.setModel(new javax.swing.SpinnerNumberModel(0, 0, 10, 1));

        DepthFrom.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));

        DepthTo.setModel(new javax.swing.SpinnerNumberModel(0, 0, 99, 1));

        Lat.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-180.0f), Float.valueOf(180.0f), Float.valueOf(0.1f)));

        Lon.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-180.0f), Float.valueOf(180.0f), Float.valueOf(0.1f)));

        MinLat.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-180.0f), Float.valueOf(1800.0f), Float.valueOf(0.1f)));

        MinLon.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-180.0f), Float.valueOf(180.0f), Float.valueOf(0.1f)));

        MaxLat.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-180.0f), Float.valueOf(180.0f), Float.valueOf(0.1f)));

        MaxLon.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(-180.0f), Float.valueOf(180.0f), Float.valueOf(0.1f)));

        jLabel14.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabel14.setText("current WS:");

        jLabelCurrentConfig.setFont(new java.awt.Font("Lucida Grande", 0, 10)); // NOI18N
        jLabelCurrentConfig.setForeground(new java.awt.Color(51, 102, 255));
        jLabelCurrentConfig.setText(" ");

        jTextAreaTEST.setEditable(false);
        jTextAreaTEST.setColumns(20);
        jTextAreaTEST.setRows(5);
        jTextAreaTEST.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(jTextAreaTEST);

        jLabelStatus.setForeground(new java.awt.Color(102, 0, 0));
        jLabelStatus.setText("...");

        jComboBoxEventVersion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBoxEventVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEventVersionActionPerformed(evt);
            }
        });

        jLabel11.setText("Event Version:");

        jMenu1.setText("File");

        jMenuItemClose.setText("Close");
        jMenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCloseActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemClose);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItemPreferences.setText("Preferences");
        jMenuItemPreferences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPreferencesActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemPreferences);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem1.setText("help Page");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jSeparator2)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(47, 47, 47)
                                .addComponent(jLabel6))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(MinMag, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DepthFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel5)
                                    .addComponent(MaxMag)
                                    .addComponent(DepthTo))))
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Lat)
                            .addComponent(Lon))
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel17)
                            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(MinRadius)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(MaxRadius)))
                        .addGap(72, 72, 72)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7)
                                    .addComponent(MinLat)
                                    .addComponent(MinLon))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(MaxLat)
                                    .addComponent(MaxLon))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AllMagnitudes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(AllOrigins)
                                .addGap(18, 18, 18)
                                .addComponent(AllStationsMagnitudes)
                                .addGap(18, 18, 18)
                                .addComponent(AllArrivals)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel11)
                            .addComponent(jComboBoxEventVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(105, 105, 105))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator3)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelCurrentConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelVersion, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 759, Short.MAX_VALUE)
                        .addGap(40, 40, 40))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jDateChooserStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LabelTimeStart)
                                    .addComponent(jSpinnerDateStartHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel23)
                                    .addComponent(jSpinnerDateStartMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jDateChooserEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(68, 68, 68)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jSpinnerDateEndHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerDateEndMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel24)))
                            .addComponent(EventId, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(WsRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(LabelWsRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(jLabelStatus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(LodaFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(SaveFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel12)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(TypeQML)
                                    .addGap(18, 18, 18)
                                    .addComponent(TypePhs))))
                        .addGap(35, 35, 35))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabelVersion)
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jLabelCurrentConfig))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel20))
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Lat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MinRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel18))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Lon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MaxRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(MinMag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MaxMag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(MinLat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(MaxLat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5))
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DepthFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MinLon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DepthTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MaxLon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(13, 13, 13)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AllMagnitudes)
                            .addComponent(AllOrigins)
                            .addComponent(AllStationsMagnitudes)
                            .addComponent(AllArrivals)
                            .addComponent(jComboBoxEventVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(LabelWsRequest)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(WsRequestButton))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(TypePhs)
                                .addComponent(TypeQML)))
                        .addGap(22, 22, 22)
                        .addComponent(jLabelStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SaveFileButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(LodaFileButton))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDateChooserStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(LabelTimeStart)
                                    .addComponent(jLabel23))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jSpinnerDateStartHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinnerDateStartMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(jLabel15)
                            .addComponent(jLabel2))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jSpinnerDateEndHH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinnerDateEndMM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jDateChooserEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addComponent(jLabel22)
                        .addGap(4, 4, 4)
                        .addComponent(EventId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    /*
    *
    * Button Load XML
    *
    */
    private void WsRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WsRequestButtonActionPerformed
       
        this.LabelWsRequest.setText("loading... ");
        
        jLabelStatus.setText(":: Request in Progress ::");
        //** clean text area
        //this.jTextAreaTEST.
        System.out.println("inside mainFrame Parser Started:  " + (new Date()));
        Main.myPrint(" request button pressed ");

        // prep querystring
        String QueryPrep = "";
        String OtherPrep = "";
        String PostPrep = "";
        
        if(EventId.getText().isEmpty()) {
            this.jDateChooserStart.getDate(); 
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
            String DateStartString = formatter.format(this.jDateChooserStart.getDate());
            String DateEndString = formatter.format(this.jDateChooserEnd.getDate());
            
            if (DateStartString.equals(DateEndString) && 
                    String.format("%02d",jSpinnerDateStartHH.getValue()).equals(String.format("%02d",jSpinnerDateEndHH.getValue())) &&
                    String.format("%02d",jSpinnerDateStartMM.getValue()).equals(String.format("%02d",jSpinnerDateEndMM.getValue())) 
                    || DateStartString.isEmpty() || DateEndString.isEmpty() ) {
                System.out.print(" ATTENZIONE data errata!");
            }
            /*
            *    QueryPrep
            */
            QueryPrep = "query?starttime="+DateStartString+"T" + String.format("%02d",jSpinnerDateStartHH.getValue()) +":" +  String.format("%02d",jSpinnerDateStartMM.getValue())  +":00" 
                       + "&endtime="+DateEndString+"T"+ String.format("%02d",jSpinnerDateEndHH.getValue()) +":" + String.format("%02d",jSpinnerDateEndMM.getValue()) +":00" ;
            /*
            *    OtherPrep
            */ 
            if(!MinMag.getValue().toString().equalsIgnoreCase("0")) OtherPrep = OtherPrep+"&minmag="+MinMag.getValue().toString();
            if(!MaxMag.getValue().toString().equalsIgnoreCase("0")) OtherPrep = OtherPrep+"&maxmag="+MaxMag.getValue().toString();
            if(!DepthFrom.getValue().toString().equalsIgnoreCase("0")) OtherPrep = OtherPrep+"&mindepth="+DepthFrom.getValue().toString();
            if(!DepthTo.getValue().toString().equalsIgnoreCase("0")) OtherPrep = OtherPrep+"&maxdepth"+DepthTo.getValue().toString();

            if(!Lat.getValue().toString().equalsIgnoreCase("0.0")) OtherPrep = OtherPrep+"&lat="+Lat.getValue().toString();
            if(!Lon.getValue().toString().equalsIgnoreCase("0.0")) OtherPrep = OtherPrep+"&lon="+Lon.getValue().toString();
            if(!MinRadius.getValue().toString().equalsIgnoreCase("0")) OtherPrep = OtherPrep+"&maxradius="+MinRadius.getValue().toString();
            if(!MaxRadius.getValue().toString().equalsIgnoreCase("0")) OtherPrep = OtherPrep+"&minradius="+MaxRadius.getValue().toString();

            if(!MinLat.getValue().toString().equalsIgnoreCase("0") && Lat.getValue().toString().equalsIgnoreCase("0")) OtherPrep = OtherPrep+"&minlat="+MinLat.getValue().toString();
            if(!MinLon.getValue().toString().equalsIgnoreCase("0") && Lon.getValue().toString().equalsIgnoreCase("0")) OtherPrep = OtherPrep+"&minlon="+MinLon.getValue().toString();
            if(!MaxLat.getValue().toString().equalsIgnoreCase("0") && Lat.getValue().toString().equalsIgnoreCase("0")) OtherPrep = OtherPrep+"&maxlat="+MaxLat.getValue().toString();
            if(!MaxLon.getValue().toString().equalsIgnoreCase("0") && Lon.getValue().toString().equalsIgnoreCase("0")) OtherPrep = OtherPrep+"&maxlon="+MaxLon.getValue().toString();        
        }
        else {
            QueryPrep = "query?eventid="+EventId.getText();
        }
        /*
        *
        *    PostPrep
        *
        */
        if(AllMagnitudes.isSelected()) PostPrep = PostPrep+"&includeallmagnitudes=true";
        if(AllOrigins.isSelected()) PostPrep = PostPrep+"&includeallorigins=true";
        if(AllStationsMagnitudes.isSelected()) PostPrep = PostPrep+"&includeallstationsmagnitudes=true";
        if(AllArrivals.isSelected()) PostPrep = PostPrep+"&includearrivals=true"; 
        
        System.out.println("Query Prep: "+QueryPrep); 
        System.out.println("Other Prep: "+OtherPrep); 
        System.out.println("Post Prep: "+PostPrep);
        
        myRun(QueryPrep,OtherPrep,PostPrep);
        jLabelStatus.setText(":: Request Completed ::");
        this.LabelWsRequest.setText("Load remote file here");
    }//GEN-LAST:event_WsRequestButtonActionPerformed

    /*
    *
    *    Load File (QML)
    *
    */
    private void LodaFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LodaFileButtonActionPerformed
        
        int retVal = LoadFileName.showOpenDialog(this);
        
        if (retVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            try {
                java.io.File file = LoadFileName.getSelectedFile( );
                String file_name = file.toString( );
                
                System.out.println("  obj LoadFileName: "+") " + file_name+"\n");
                
                final String EoL = System.getProperty("line.separator");
                List<String> lines = Files.readAllLines(Paths.get(file_name), Charset.defaultCharset());
                
                StringBuilder sb = new StringBuilder();
                for (String line : lines) {
                    sb.append(line).append(EoL);
                }
                final String QMLcontent = sb.toString();
                myRun(QMLcontent);

            } catch (IOException | ParseException | SAXException | ParserConfigurationException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_LodaFileButtonActionPerformed

    /*
    *
    *    Save File (PHS or QML)
    *
    */
    private void SaveFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveFileButtonActionPerformed
        
        int retVal = SaveFileName.showSaveDialog(this);
        String content;
        
        jLabelStatus.setText("...");
        
        if (retVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File save_file = SaveFileName.getSelectedFile( );
            String file_name = save_file.toString( );
               
            try {
                File file = new File(file_name);
                if (!file.exists()) {
                        file.createNewFile();
                }
                // PHS is requested
                if(TypePhs.isSelected()) {
//                Date date = new Date();
                     // = "This is the PHS created at:"+date+" "+System.lineSeparator();
                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(" "+System.lineSeparator());
                    String currentEvent = null;
                    for (int i = 0;i<phs.size(); i++){
                        if(!phs.get(i).getEventId().equalsIgnoreCase(currentEvent)) {
                             System.out.println("  \n ****************  Event id: " + phs.get(i).getEventId()+"  ");
                             currentEvent = phs.get(i).getEventId();
                             bw.write("                 10 EVENT ID:"+phs.get(i).getEventId()+System.lineSeparator());
                        }
                        content = phs.get(i).getFormatPhsLine(options.isPhs_extended()); //+System.lineSeparator()
                        if(content != null) {
                            System.out.println(i+"]"+ content + " pickID:"+phs.get(i).getPickId()+ " AmpliID:"+phs.get(i).getAmplitudeId());
                            bw.write(content+System.lineSeparator());
                        }
                    }
                    bw.close();
                }
                // QML is requested
                else if(TypeQML.isSelected()){
                    FileWriter fw = new FileWriter(file.getAbsoluteFile());
                    BufferedWriter bw = new BufferedWriter(fw);
                    bw.write(QmlString);
                    bw.close();
                }
                System.out.println("Done");

            } catch (IOException e) {
                    e.printStackTrace();
            }
        }
        SaveFileButton.setEnabled(false);
        // clear textarea
        try {
            jTextAreaTEST.getDocument().remove(0,jTextAreaTEST.getDocument().getLength());
        } catch (BadLocationException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SaveFileButtonActionPerformed

    private void TypePhsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypePhsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TypePhsActionPerformed

    private void jMenuItemPreferencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPreferencesActionPerformed
        // TODO add your handling code here:
        Options JO = new Options(this,true);
//        JpanelOptions JO = new JpanelOptions();
        JO.setVisible(true);
    }//GEN-LAST:event_jMenuItemPreferencesActionPerformed

    private void jMenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCloseActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItemCloseActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        Help helpPage = new Help(this,true);
        helpPage.setVisible(true);
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void TypeQMLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TypeQMLActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TypeQMLActionPerformed

    private void EventIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EventIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EventIdActionPerformed

    private void EventIdPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_EventIdPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_EventIdPropertyChange

    private void EventIdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EventIdMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_EventIdMouseClicked

    private void jComboBoxEventVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEventVersionActionPerformed
        // TODO add your handling code here:
        
        this.options.setEventVersion((String)jComboBoxEventVersion.getSelectedItem());
    }//GEN-LAST:event_jComboBoxEventVersionActionPerformed
    
    public  javax.swing.JTextArea getTextAreaTest () {
        
        return this.jTextAreaTEST;
    }
     /*
    *
    *
    *    run for Local FILE
    *
    * 
    */
    private void myRun(String QMLstring) throws ParseException, SAXException, IOException, ParserConfigurationException {
        
        LabelWsRequest.setText("File parser...");
        options.load();
        // **start parser
        QmlParser parser = new QmlParser(options.getEventVersion());
        parser.setExtended(options.isPhs_extended());
        phs = parser.ParseQuakeML(QMLstring);
        SaveFileButton.setEnabled(true);
    }
    
    /*
    *
    *
    *    run for WS QML
    *
    * 
    */
    private void myRun(String QueryPrep,String OtherPrep,String PostPrep) {
        
        jLabelStatus.setText(":: Request send ::");
        System.out.println(" Request send!");
        //options = new Options(this,true);
        this.options.setVisible(false);
        String[] baseUrl = this.options.getURI_WEBSERVICE_DEFAULT().split("\\\n");
        System.out.println(" option Event Version:"+this.options.getEventVersion());
        try {
            // ** start parser
            String EventVersion = this.options.getEventVersion();
            QmlParser parser = new QmlParser(this.jTextAreaTEST, EventVersion);
            parser.setExtended(options.isPhs_extended());
            // ** load phs
            if(TypePhs.isSelected()) {  // ### output is PHS
                try { 
                    phs = parser.ParseQuakeML(baseUrl[0].trim(), QueryPrep,OtherPrep,PostPrep );
                }
                catch (SAXException| IOException| ParserConfigurationException| ParseException ex ) {

                    System.out.println("\n\n * * * ATTENTION query parameters are wrong or request is too long. * * * \n \n * * * " +ex +"\n \n * * * try again with right query-params / time-span. ");
                    
//                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else {                      // ### output is QML
                // ** start http request
                HttpUtil connect = new HttpUtil();
                String userClient = " "; 
                QmlString =  connect.RequestWs1(baseUrl[0].trim()+QueryPrep+userClient);
                System.out.print(" xml: "+QmlString+"\n\n");
            }
            SaveFileButton.setEnabled(true);
            
        } catch (SAXException | IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /*
        helpMe (String entry) from commandLine
    */
    public static void helpMe (String entry) {
        switch (entry) {
            case "help" :
                System.out.println("pagina di help") ;
                String helpText = null;
                try {
                    final String EoL = System.getProperty("line.separator");
                    List<String> lines;
                    lines = Files.readAllLines(Paths.get("HelpText.txt"), Charset.defaultCharset());
                    StringBuilder sb = new StringBuilder();
                    for (String line : lines) {
                        sb.append(line).append(EoL);
                    }
                    helpText = sb.toString();
                    System.out.print("\n\n***qml_to_phs "+version+" ***\n"+helpText) ;

                } catch (IOException ex) {
                    Logger.getLogger(Help.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case "version" :
                System.out.println(version) ;
                break;
            case "config" :
                System.out.println("pagina di Configurazione (editare il file xml per le modifiche)") ;
                System.out.println("qml_to_phs_properties.xml") ;
                break;
        }
        System.exit(0);
    }
   

    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox AllArrivals;
    private javax.swing.JCheckBox AllMagnitudes;
    private javax.swing.JCheckBox AllOrigins;
    private javax.swing.JCheckBox AllStationsMagnitudes;
    private javax.swing.JSpinner DepthFrom;
    private javax.swing.JSpinner DepthTo;
    public javax.swing.JTextField EventId;
    private javax.swing.JLabel LabelTimeStart;
    private javax.swing.JLabel LabelWsRequest;
    private javax.swing.JSpinner Lat;
    private javax.swing.JFileChooser LoadFileName;
    private javax.swing.JButton LodaFileButton;
    private javax.swing.JSpinner Lon;
    private javax.swing.JSpinner MaxLat;
    private javax.swing.JSpinner MaxLon;
    private javax.swing.JSpinner MaxMag;
    private javax.swing.JSpinner MaxRadius;
    private javax.swing.JSpinner MinLat;
    private javax.swing.JSpinner MinLon;
    private javax.swing.JSpinner MinMag;
    private javax.swing.JSpinner MinRadius;
    private javax.swing.JButton SaveFileButton;
    private javax.swing.JFileChooser SaveFileName;
    private javax.swing.ButtonGroup TypeFileRequested;
    private javax.swing.JRadioButton TypePhs;
    private javax.swing.JRadioButton TypeQML;
    private javax.swing.JButton WsRequestButton;
    private javax.swing.JComboBox<String> jComboBoxEventVersion;
    private com.toedter.calendar.JDateChooser jDateChooserEnd;
    private com.toedter.calendar.JDateChooser jDateChooserStart;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelCurrentConfig;
    public javax.swing.JLabel jLabelStatus;
    private javax.swing.JLabel jLabelVersion;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemClose;
    private javax.swing.JMenuItem jMenuItemPreferences;
    public javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSpinner jSpinnerDateEndHH;
    private javax.swing.JSpinner jSpinnerDateEndMM;
    private javax.swing.JSpinner jSpinnerDateStartHH;
    private javax.swing.JSpinner jSpinnerDateStartMM;
    public javax.swing.JTextArea jTextAreaTEST;
    // End of variables declaration//GEN-END:variables
}
